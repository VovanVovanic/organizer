{"version":3,"sources":["api/api.ts","redux/error-utils.ts","redux/app-reducer.ts","redux/auth-reducer.ts","components/header/header.tsx","components/common/errorSnackbar/errorSnackbar.tsx","redux/todos-reduser.ts","components/common/addItemForm/addItemForm.tsx","components/common/buttons/buttons.tsx","components/common/editableTitle/editableTitle.tsx","redux/task-reducer.ts","components/todoLists/listItem/listItem.tsx","components/todoLists/todoLists.tsx","components/content/content.tsx","components/common/login/login.tsx","components/common/404/404-error.png","components/common/404/404.tsx","components/app/App.tsx","redux/store.ts","index.tsx","components/app/App.module.scss","components/common/addItemForm/form.module.scss","components/common/editableTitle/title.module.scss","components/common/buttons/buttons.module.scss"],"names":["TaskStatuses","TaskPriorities","ResultCodeStatuses","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","then","res","data","title","post","id","delete","put","todolistId","taskId","taskTitile","model","email","password","rememberMe","response","handleServerAppError","dispatch","messages","length","setAppError","error","setAppStatus","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isInitialized","reducers","state","action","payload","setAppInitialized","init","appReducer","reducer","actions","isLoggedIn","setIsLoggedIn","value","authReducer","Header","useDispatch","useSelector","auth","classes","makeStyles","theme","createStyles","root","display","margin","spacing","purple","color","palette","getContrastText","deepPurple","backgroundColor","useStyles","isLogoutBtn","Button","variant","onClick","resultCode","catch","Avatar","className","FormGroup","style","background","padding","FormControlLabel","control","label","AppBar","position","Alert","props","elevation","ErrorSnackbar","app","console","log","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","addTodolist","unshift","todolists","filter","entityStatus","removeTodolist","el","changeTodolistTitle","indx","findIndex","changeTodolistFilter","changeListEntity","setTodolists","map","tl","todolistsReducer","AddItemForm","React","memo","addTitle","type","placeholder","disabled","useState","focus","setFocus","cls","formButton","push","setError","newTitle","setTitle","onAddedNewTitle","trim","AddFormWrap","TextField","helperText","onChange","e","currentTarget","onKeyDown","key","width","autoFocus","IconButton","AddBox","Buttons","changeFilterClick","active","btnList","activeBtn","Active","onFilterChange","Grid","container","justify","marginTop","EditableTitle","changeTitle","edit","setEdit","Span","onTitleChangeHandler","useCallback","onBlurHandler","onBlur","onDoubleClick","join","setTasks","tasks","deleteTask","splice","addNewTask","task","todoListId","changeTaskStatus","changeTaskTitle","changeTaskEntity","todoId","enStatus","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskStatus","changes","getState","find","t","s","New","startDate","priority","description","deadline","finally","ListItem","isShadow","Completed","isDone","onStatusChange","checked","onTitleChange","Paper","Checkbox","inputProps","size","startIcon","TodoLists","useEffect","items","fetchTasksReceive","changeFilterHandler","onTodoRemove","onTaskAdded","item","OnChangeTodoName","fetchChangeListTitle","itemList","arr","onFilterHandler","xs","marginLeft","Content","todos","onTodoAdded","fetchCreateTodoList","Container","fixed","justifyContent","direction","to","Login","formik","useFormik","initialValues","validate","values","errors","test","onSubmit","resetForm","handleSubmit","FormControl","FormLabel","href","target","getFieldProps","handleBlur","touched","Page404","alignItems","height","CardMedia","component","alt","image","Img","App","LinearProgress","backgroundImage","exact","path","render","from","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.e6e3fe1d.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport { DataType } from '../components/common/login/login';\r\nimport { RequestStatusType } from '../redux/app-reducer';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'ab1b860e-9865-4320-8135-23abb9a648e8'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>('todo-lists').then((res) => res.data);\r\n    },\r\n\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', { title: title }).then((res) => res.data);\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, { title: title }).then((res) => res.data);\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, { title: taskTitile }).then((res) => res.data);\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model).then((res) => res.data)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post<ResponseType<{ userId: number }>>(`auth/login/`, { email, password, rememberMe }).then(response => response.data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<DataType>>(`auth/me`).then((response) => response.data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/login`).then((response) => response.data)\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport enum ResultCodeStatuses {\r\n    Success = 0,\r\n    Error = 1,\r\n    Captcha = 10\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses | null\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number | null\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: Array<TaskType>\r\n}\r\n","\r\nimport { Dispatch } from 'redux';\r\nimport { setAppError, SetAppErrorType, setAppStatus, SetAppStatusType } from './app-reducer';\r\nimport{ResponseType}from '../api/api'\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n  if (data.messages.length) {\r\n    dispatch(setAppError({error:data.messages[0]}))\r\n  } else {\r\n    dispatch(setAppError({error:'Some error occurred'}))\r\n  }\r\n  dispatch(setAppStatus({status:'failed'}))\r\n}\r\n\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: ErrorUtilsDispatchType) => {\r\n  dispatch(setAppError({error:error.message}))\r\n  dispatch(setAppStatus({status:'failed'}))\r\n}\r\n\r\nexport type ErrorUtilsDispatchType = Dispatch<SetAppErrorType | SetAppStatusType>","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\r\nimport { Dispatch } from \"redux\"\r\nimport { todolistsAPI } from \"../api/api\"\r\nimport { setIsLoggedIn } from \"./auth-reducer\"\r\nimport { handleServerAppError, handleServerNetworkError } from \"./error-utils\"\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\ntype errorType = string | null\r\n\r\nconst initialState = {\r\n   status: 'idle' as RequestStatusType,\r\n   error: null as errorType,\r\n   isInitialized: false\r\n}\r\n\r\nexport type SetAppStatusType = ReturnType<typeof setAppStatus>\r\nexport type SetAppErrorType = ReturnType<typeof setAppError>\r\nexport type SetInitTypeType = ReturnType<typeof setAppInitialized>\r\n\r\n\r\nconst slice = createSlice({\r\n  name: 'app',\r\n  initialState: initialState,\r\n  reducers: {\r\n    setAppStatus(state, action: PayloadAction<{status:RequestStatusType}>) {\r\n      state.status = action.payload.status\r\n      },\r\n      setAppInitialized(state, action: PayloadAction<{ init:boolean }>) {\r\n        state.isInitialized = action.payload.init\r\n      },\r\n      setAppError(state, action: PayloadAction<{ error: errorType}>) {\r\n        state.error = action.payload.error\r\n    }\r\n  }\r\n})\r\nexport const appReducer = slice.reducer\r\nexport const { setAppError,  setAppStatus, setAppInitialized} = slice.actions\r\n\r\n\r\nexport const initializeApp = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppInitialized({init:false}))\r\n   todolistsAPI.me().then(res => {\r\n       if (res.resultCode === 0) {\r\n           dispatch(setIsLoggedIn({ value:true}));\r\n       } else {\r\n           handleServerAppError(res, dispatch);\r\n       }\r\n        dispatch(setAppInitialized({init:true}))\r\n   })\r\n       .catch((error) => {\r\n      handleServerNetworkError(error, dispatch);\r\n    });\r\n}","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { Dispatch } from \"redux\";\r\nimport { todolistsAPI } from \"../api/api\";\r\nimport {setAppStatus} from \"./app-reducer\";\r\nimport { handleServerAppError, handleServerNetworkError } from \"./error-utils\";\r\n\r\n\r\nconst initialState = {\r\n  isLoggedIn: false,\r\n};\r\n\r\nconst slice = createSlice({\r\n  name: 'auth',\r\n  initialState: initialState,\r\n  reducers: {\r\n    setIsLoggedIn(state, action: PayloadAction<{value:boolean}>) {\r\n      state.isLoggedIn = action.payload.value\r\n    }\r\n  }\r\n})\r\nexport const authReducer = slice.reducer\r\nexport const{setIsLoggedIn}=slice.actions\r\n\r\n// thunks\r\nexport const login = (email: string, password: string, rememberMe: boolean) => (dispatch: Dispatch) => {\r\n  dispatch(setAppStatus({status:\"loading\"}));\r\n todolistsAPI.login(email, password, rememberMe)\r\n    .then((res) => {\r\n      if (res.resultCode === 0) {\r\n        dispatch(setAppStatus({status:\"succeeded\"}));\r\n        dispatch(setIsLoggedIn({value:true}));\r\n      } else {\r\n        handleServerAppError(res, dispatch);\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch);\r\n    });\r\n};\r\nexport const logout = () => (dispatch: Dispatch) => {\r\n  dispatch(setAppStatus({status:\"loading\"}));\r\n  todolistsAPI.logout()\r\n    .then((res) => {\r\n      if (res.resultCode === 0) {\r\n        dispatch(setIsLoggedIn({value:false}));\r\n        dispatch(setAppStatus({status:\"succeeded\"}));\r\n      } else {\r\n        handleServerAppError(res, dispatch);\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch);\r\n    });\r\n};\r\n\r\n","import { AppBar, Avatar, Button, createStyles, FormControlLabel, FormGroup, makeStyles, Theme } from '@material-ui/core';\r\nimport { deepPurple } from '@material-ui/core/colors';\r\nimport React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { logout } from '../../redux/auth-reducer';\r\nimport { AppRootStateType } from '../../redux/store';\r\n\r\n\r\nconst Header = () => {\r\n  const dispatch = useDispatch()\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn);\r\n  const useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex',\r\n      '& > *': {\r\n        margin: theme.spacing(1),\r\n      },\r\n    },\r\n    purple: {\r\n      color: theme.palette.getContrastText(deepPurple[500]),\r\n      backgroundColor: deepPurple[500],\r\n    },\r\n  }),\r\n);\r\n\r\n  const classes = useStyles();\r\n\r\n  let isLogoutBtn = isLoggedIn ? (\r\n    <Button\r\n      color=\"secondary\"\r\n      variant=\"contained\"\r\n      onClick={() => dispatch(logout())}\r\n    >\r\n      Logout\r\n    </Button>\r\n  ) : (\r\n    <Avatar className={classes.purple}>HI</Avatar>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <FormGroup style={{ background: \"rgba(31, 58, 147, .9)\", padding:\"5px 40px\" }}>\r\n        <FormControlLabel\r\n          control={isLogoutBtn}\r\n          label={\"\"}\r\n        />\r\n      </FormGroup>\r\n      <AppBar position=\"static\" color=\"primary\">\r\n        <div>\r\n          <h1>organizer</h1>\r\n          <h3>handle your daily tasks properly</h3>\r\n        </div>\r\n      </AppBar>\r\n    </>\r\n  );\r\n}\r\nexport default Header","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../../redux/store'\r\nimport { setAppError } from '../../../redux/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n   return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n  \r\n    let error = useSelector<AppRootStateType, string | null>((state) => state.app.error);\r\n    console.log(error);\r\n    \r\nconst dispatch = useDispatch()\r\n    \r\n   const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n       if (reason === 'clickaway') {\r\n           return\r\n       }\r\n       dispatch(setAppError({error:null}));\r\n   }\r\n   return (\r\n     <Snackbar\r\n       open={error !== null}\r\n       autoHideDuration={6000}\r\n       onClose={handleClose}\r\n     >\r\n       <Alert onClose={handleClose} severity=\"error\">\r\n         {error}\r\n       </Alert>\r\n     </Snackbar>\r\n   );\r\n}\r\n\r\n","\r\nimport { createSlice, Dispatch, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { todolistsAPI, TodolistType } from \"../api/api\";\r\nimport { RequestStatusType, setAppStatus } from \"./app-reducer\";\r\nimport { handleServerAppError, handleServerNetworkError } from \"./error-utils\";\r\n\r\n\r\n\r\n\r\n\r\nexport type FilterType = 'all' | 'active' | 'completed' \r\nexport type TodoListsCommonType = TodolistType & {\r\n  filter: FilterType\r\n  entityStatus: RequestStatusType\r\n}\r\n\r\n\r\n\r\n\r\nconst initialState: Array<TodoListsCommonType> = []\r\n\r\n\r\nconst slice = createSlice({\r\n  name: 'todos',\r\n  initialState: initialState,\r\n  reducers: {\r\n    addTodolist(state, action: PayloadAction<{ todolists: TodolistType }>) {\r\n      state.unshift({ ...action.payload.todolists, filter: 'all', entityStatus: 'idle' })\r\n    },\r\n    removeTodolist(state, action: PayloadAction<{ todolistId: string }>) {\r\n      return state.filter(el => el.id !== action.payload.todolistId)\r\n    },\r\n    changeTodolistTitle(state, action: PayloadAction<{ id: string, title: string }>) {\r\n      const indx = state.findIndex((el) => el.id === action.payload.id)\r\n      state[indx].title = action.payload.title\r\n    },\r\n    changeTodolistFilter(state, action: PayloadAction<{ id: string, filter: FilterType }>) {\r\n      const indx = state.findIndex((el) => el.id === action.payload.id)\r\n      state[indx].filter = action.payload.filter\r\n    },\r\n    changeListEntity(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n      const indx = state.findIndex((el) => el.id === action.payload.id)\r\n      state[indx].entityStatus = action.payload.status\r\n    },\r\n    setTodolists (state, action: PayloadAction<{todolists: Array<TodolistType>}>) {\r\n      return action.payload.todolists.map(tl => ({...tl,filter: 'all',entityStatus: 'idle'}))\r\n    },\r\n  }\r\n})\r\nexport const todolistsReducer = slice.reducer\r\nexport const { addTodolist, removeTodolist, changeTodolistTitle, changeTodolistFilter, changeListEntity, setTodolists } = slice.actions\r\n\r\n\r\n\r\nexport const fetchTodolists = () =>(dispatch:Dispatch) => {\r\n    dispatch(setAppStatus({ status: 'loading' }))\r\n    todolistsAPI.getTodolists()\r\n      .then((res) => {\r\n        dispatch(setTodolists({todolists: res}))\r\n        dispatch(setAppStatus({ status: 'succeeded' }))\r\n      })\r\n      .catch((e) => {\r\n        handleServerNetworkError({ message: e.message }, dispatch)\r\n      })\r\n  }\r\n\r\nexport const fetchRemoveTodoList = (id: string) =>(dispatch:Dispatch) => {\r\n    dispatch(changeListEntity({id, status:'loading'}))\r\n    dispatch(setAppStatus({ status: 'loading' }))\r\n    todolistsAPI.deleteTodolist(id)\r\n      .then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n          dispatch(removeTodolist({todolistId:id}))\r\n          dispatch(setAppStatus({ status: 'succeeded' }))\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        handleServerNetworkError({ message: e.message }, dispatch)\r\n      })\r\n  }\r\n\r\nexport const fetchCreateTodoList = (title: string) =>(dispatch:Dispatch) => {\r\n    dispatch(setAppStatus({ status: 'loading' }))\r\n    todolistsAPI.createTodolist(title)\r\n      .then((res) => {\r\n        if (res.resultCode === 0) {\r\n          dispatch(addTodolist({todolists: res.data.item}))\r\n          dispatch(setAppStatus({ status: 'succeeded' }))\r\n        }\r\n        else {\r\n          handleServerAppError(res, dispatch)\r\n        }\r\n        dispatch(setAppStatus({ status: 'succeeded' }))\r\n      })\r\n      .catch((e) => {\r\n        handleServerNetworkError({ message: e.message }, dispatch)\r\n      })\r\n  }\r\n\r\nexport const fetchChangeListTitle = (title: string, todoListId: string)=>(dispatch:Dispatch) => {\r\n    dispatch(setAppStatus({ status: 'loading' }))\r\n    todolistsAPI.updateTodolist(todoListId, title)\r\n      .then((res) => {\r\n        if (res.resultCode === 0) {\r\n          dispatch(changeTodolistTitle({id:todoListId, title}))\r\n          dispatch(setAppStatus({ status: 'succeeded' }))\r\n        }\r\n        else {\r\n          handleServerAppError(res, dispatch)\r\n        }\r\n        dispatch(setAppStatus({ status: 'succeeded' }))\r\n\r\n      })\r\n      .catch((e) => {\r\n        handleServerNetworkError({ message: e.message }, dispatch)\r\n      })\r\n  }","import { IconButton, TextField } from '@material-ui/core'\r\nimport { AddBox } from '@material-ui/icons';\r\nimport React, { useState } from 'react'\r\nimport classes from \"./form.module.scss\";\r\n\r\n\r\ntype InputPropsType = {\r\n  addTitle: (title: string) => void;\r\n  name: string;\r\n  type?: string;\r\n  placeholder?: string;\r\n  disabled?: boolean\r\n};\r\nconst AddItemForm: React.FC<InputPropsType> = React.memo(({ addTitle, name, type, placeholder, disabled}) => {\r\nconst[focus, setFocus]=useState<boolean>(false)\r\n\r\n  const cls = [classes.formButton];\r\n  type && cls.push(classes[type])\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [newTitle, setTitle] = useState<string>(\"\");\r\n\r\n  const onChangeInput = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value);\r\n    error !== null && setError(null);\r\n  };\r\n  const onKeyPressHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    e.key === \"Enter\" && onAddedNewTitle();\r\n    e.key === \"Escape\" && setTitle(\"\");\r\n     setFocus(true);\r\n  };\r\n\r\n  const onAddedNewTitle = () => {\r\n    if (newTitle.trim() !== \"\") {\r\n      addTitle(newTitle)\r\n      setError(null);\r\n    } else {\r\n      setError(\"Title is required\");\r\n    }\r\n    setTitle(\"\");\r\n    setFocus(true)\r\n  };\r\n  return (\r\n    <div className={classes.AddFormWrap}>\r\n      <TextField\r\n        variant=\"standard\"\r\n        error={!!error}\r\n        helperText={error}\r\n        value={newTitle}\r\n        onChange={onChangeInput}\r\n        onKeyDown={onKeyPressHandler}\r\n        style={{ width: \"80%\" }}\r\n        placeholder={placeholder}\r\n        disabled={disabled}\r\n        autoFocus={focus}\r\n      />\r\n      <IconButton\r\n        disabled={disabled}\r\n        color=\"primary\" onClick={onAddedNewTitle}>\r\n        <AddBox />\r\n        {name}\r\n      </IconButton>\r\n    </div>\r\n  );\r\n})\r\nexport default AddItemForm","import classes from './buttons.module.scss';\r\nimport { Button, Grid } from '@material-ui/core'\r\nimport React from 'react'\r\nimport { FilterType } from '../../../redux/todos-reduser';\r\n\r\n\r\n\r\ntype BtnsPropType = {\r\n  changeFilterClick: (value: FilterType) => void;\r\n  active: FilterType;\r\n};\r\nconst Buttons:React.FC<BtnsPropType> = ({changeFilterClick, active}) => {\r\n  const onFilterChange = (value: FilterType)=>{\r\n      changeFilterClick(value)\r\n  }\r\n  const btnList = [\r\n    { label: \"All\", value: \"all\" },\r\n    { label: \"Active\", value: \"active\" },\r\n    { label: \"Completed\", value: \"completed\" },\r\n  ].map(({ label, value }) => {\r\nlet activeBtn =  active === value ? classes.Active : ''\r\n    return (\r\n      <Button\r\n        className = {activeBtn}\r\n        key={value}\r\n        onClick={() => onFilterChange(value as FilterType)}\r\n        color=\"primary\"\r\n        variant='outlined'\r\n        \r\n      >\r\n        {label}\r\n      </Button>\r\n    );\r\n  })\r\n  return (\r\n    <Grid container justify=\"space-between\" style={{ width: \"100%\", marginTop: \"20px\" }}>\r\n      {btnList}\r\n    </Grid>\r\n  );\r\n}\r\nexport default Buttons","import { TextField } from '@material-ui/core'\r\nimport React, { useCallback, useState } from 'react'\r\nimport classes from './title.module.scss'\r\n\r\n\r\ntype EdTitleType = {\r\n  value: string\r\n  changeTitle?: (title: string) => void\r\n  type?: string\r\n  disabled?: boolean\r\n}\r\nconst EditableTitle: React.FC<EdTitleType> = React.memo(({ value, changeTitle, type, disabled }) => {\r\n  const [edit, setEdit] = useState<boolean>(false)\r\n  const [title, setTitle] = useState<string>(value)\r\n\r\nconst cls=[classes.Span]\r\n  type && cls.push(classes[type])\r\n\r\n const onEditHandler = () => {\r\n    setEdit(true)\r\n  }\r\n\r\n  const onTitleChangeHandler = useCallback(() => {\r\n    if (title.trim() !== \"\") {\r\n      changeTitle && changeTitle(title);\r\n    }\r\n  }, [changeTitle, title]);\r\n  const onBlurHandler = () => {\r\n    onTitleChangeHandler()\r\n    setEdit(false)\r\n  }\r\n  \r\n  const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value)\r\n  };\r\n  const onKeyHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') { onBlurHandler() }\r\n    if (e.key === 'Escape') {\r\n      setTitle(value)\r\n      setEdit(false)\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      {edit\r\n        ? <TextField\r\n          disabled={disabled}\r\n          variant='standard'\r\n          type='text'\r\n          value={title}\r\n          autoFocus\r\n          onBlur={onBlurHandler}\r\n          onChange={onChangeHandler}\r\n          onKeyDown={onKeyHandler}\r\n        />\r\n        : <span onDoubleClick={onEditHandler} className={cls.join(' ')}>{value}</span>\r\n      }\r\n    </>\r\n  )\r\n})\r\n\r\nexport default EditableTitle","\r\nimport { addTodolist, changeListEntity, removeTodolist, setTodolists } from \"./todos-reduser\";\r\nimport { TaskStatuses, TaskType, todolistsAPI } from '../api/api'\r\nimport { AppRootStateType } from \"./store\";\r\nimport { TasksStateType } from \"../components/app/App\";\r\nimport { RequestStatusType, setAppStatus} from \"./app-reducer\";\r\nimport { handleServerAppError, handleServerNetworkError } from \"./error-utils\";\r\nimport { createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport { Dispatch } from 'redux';\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\n\r\nexport type ChangeTaskStatuses = TaskStatuses | null\r\nexport type ChangeTaskStatusType = ReturnType<typeof changeTaskStatus>\r\n\r\n\r\n\r\n\r\nconst slice = createSlice({\r\n  name: 'todos',\r\n  initialState: initialState,\r\n  reducers: {\r\n    setTasks(state, action: PayloadAction<{ todolistId: string, tasks: Array<TaskType> }>) {\r\n      state[action.payload.todolistId] = action.payload.tasks\r\n    },\r\n    deleteTask(state, action: PayloadAction<{ todolistId: string, taskId: string }>) {\r\n      const tasks = state[action.payload.todolistId]\r\n      const indx = tasks.findIndex((el) => el.id === action.payload.taskId)\r\n      if (indx > -1) {\r\n        tasks.splice(indx, 1)\r\n      }\r\n    },\r\n    addNewTask(state, action: PayloadAction<{ task: TaskType }>) {\r\n      state[action.payload.task.todoListId].unshift(action.payload.task)\r\n    },\r\n    changeTaskStatus(state, action: PayloadAction<{ taskId: string, status: ChangeTaskStatuses, todolistId: string }>) {\r\n      const tasks = state[action.payload.todolistId]\r\n      const indx = tasks.findIndex((el) => el.id === action.payload.taskId)\r\n      if (indx > -1) {\r\n        tasks[indx].status = action.payload.status\r\n      }\r\n    },\r\n    changeTaskTitle(state, action: PayloadAction<{ taskId: string, title: string, todolistId: string }>) {\r\n      const tasks = state[action.payload.todolistId]\r\n      const indx = tasks.findIndex((el) => el.id === action.payload.taskId)\r\n      if (indx > -1) {\r\n        tasks[indx].title = action.payload.title\r\n      }\r\n    },\r\n    changeTaskEntity(state, action: PayloadAction<{ id: string, enStatus: RequestStatusType, todoId: string }>) {\r\n      const tasks = state[action.payload.todoId]\r\n      const indx = tasks.findIndex((el) => el.id === action.payload.id)\r\n      if (indx > -1) {\r\n        tasks[indx].entityStatus = action.payload.enStatus\r\n      }\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(removeTodolist, (state, action) => {\r\n      delete state[action.payload.todolistId]\r\n    })\r\n    builder.addCase(addTodolist, (state, action) => {\r\n      state[action.payload.todolists.id] = []\r\n    })\r\n    builder.addCase(setTodolists, (state, action) => {\r\n      action.payload.todolists.forEach((el) => state[el.id] = [])\r\n    })\r\n\r\n  }\r\n})\r\nexport const tasksReducer = slice.reducer\r\nexport const { setTasks, deleteTask, changeTaskStatus, changeTaskTitle, changeTaskEntity, addNewTask } = slice.actions\r\n\r\nexport const fetchTasksReceive = (todoListId: string) => {\r\n  return (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({ status: 'loading' }))\r\n    todolistsAPI.getTasks(todoListId)\r\n      .then((res) => {\r\n        const tasks = res.data.items\r\n        dispatch(setTasks({ todolistId: todoListId, tasks }))\r\n        dispatch(setAppStatus({ status: 'succeeded' }))\r\n      })\r\n      .catch((e) => {\r\n        handleServerNetworkError({ message: e.message }, dispatch)\r\n      })\r\n  }\r\n}\r\nexport const fetchTaskDelete = (todolistId: string, taskId: string) => {\r\n \r\n  return (dispatch:Dispatch) => {\r\n    dispatch(changeTaskEntity({ id: taskId, enStatus: 'loading', todoId: todolistId }))\r\n    dispatch(setAppStatus({ status: 'loading' }))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n      \r\n      .then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n          dispatch(deleteTask({ todolistId, taskId }))\r\n          dispatch(setAppStatus({ status: 'succeeded' }))\r\n        };\r\n      })\r\n      .catch((e) => {\r\n        handleServerNetworkError({ message: e.message }, dispatch)\r\n      })\r\n      .finally(() => dispatch(changeTaskEntity({ id: taskId, enStatus: 'idle', todoId: todolistId })))\r\n  }\r\n}\r\nexport const fetchTaskCreation = (todolistId: string, taskTitile: string) => {\r\n  return (dispatch: Dispatch) => {\r\n    dispatch(changeListEntity({ id: todolistId, status: 'loading' }))\r\n    dispatch(setAppStatus({ status: 'loading' }))\r\n    todolistsAPI.createTask(todolistId, taskTitile)\r\n      .then((res) => {\r\n        if (res.resultCode === 0) {\r\n          dispatch(addNewTask({ task: res.data.item }));\r\n          dispatch(setAppStatus({ status: 'succeeded' }))\r\n          dispatch(changeListEntity({ id: todolistId, status: 'idle' }))\r\n        }\r\n        else {\r\n          handleServerAppError(res, dispatch)\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        handleServerNetworkError({ message: e.message }, dispatch)\r\n        dispatch(changeListEntity({ id: todolistId, status: 'idle' }))\r\n      })\r\n      .finally(() => dispatch(changeListEntity({ id: todolistId, status: 'idle' })))\r\n  }\r\n}\r\nexport const updateTaskStatus = (taskId: string, todolistId: string, changes: ChangeTaskStatuses | string) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n  const allTasksFromState = getState().tasks;\r\n  const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n  const task = tasksForCurrentTodolist.find(t => {\r\n    return t.id === taskId\r\n  })\r\n  if (task) {\r\n    let t = (typeof changes === 'string') ? changes : null\r\n    let s = (typeof changes === 'number') ? changes : TaskStatuses.New\r\n    dispatch(changeTaskEntity({ id: taskId, enStatus: 'loading', todoId: todolistId }))\r\n    dispatch(setAppStatus({ status: 'loading' }))\r\n    todolistsAPI.updateTask(todolistId, taskId, {\r\n      title: t === null ? task.title : t,\r\n      startDate: task.startDate,\r\n      priority: task.priority,\r\n      description: task.description,\r\n      deadline: task.deadline,\r\n      status: s === null ? task.status : s\r\n    }).then((res) => {\r\n      if (res.resultCode === 0) {\r\n        s !== null && dispatch(changeTaskStatus({ taskId, status: s, todolistId }))\r\n        t !== null && dispatch(changeTaskTitle({ taskId, title: t, todolistId }))\r\n        dispatch(setAppStatus({ status: 'succeeded' }))\r\n      }\r\n      else {\r\n        handleServerAppError(res, dispatch)\r\n      }\r\n    })\r\n      .catch((e) => {\r\n        handleServerNetworkError({ message: e.message }, dispatch)\r\n      })\r\n      .finally(() => dispatch(changeTaskEntity({ id: taskId, enStatus: 'idle', todoId: todolistId })))\r\n  }\r\n}\r\n","import classes from '../../app/App.module.scss';\r\nimport React, { useCallback } from 'react'\r\nimport EditableTitle from '../../common/editableTitle/editableTitle';\r\nimport { Button, Checkbox,  Paper } from '@material-ui/core';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { TaskStatuses, TaskType } from '../../../api/api';\r\nimport { fetchTaskDelete, updateTaskStatus } from '../../../redux/task-reducer';\r\nimport { useDispatch } from 'react-redux';\r\n\r\ntype ItemPropsType = TaskType & {\r\n  todoListId: string\r\n};\r\nconst ListItem: React.FC<ItemPropsType> = React.memo(({ id, title, status, todoListId, entityStatus}) => {\r\nconst dispatch = useDispatch()\r\n  let isShadow = status === TaskStatuses.Completed && classes.isDone\r\n  const onDeleted = () => {\r\n    dispatch(fetchTaskDelete(todoListId, id));\r\n  }\r\n  const onStatusChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n    dispatch(updateTaskStatus(id,todoListId, e.currentTarget.checked? TaskStatuses.Completed: TaskStatuses.New));\r\n  }, [id, todoListId])\r\n  \r\n  const onTitleChange= useCallback((value: string) => {\r\n    dispatch(updateTaskStatus(id, todoListId, value));\r\n  }, [dispatch, todoListId])\r\n  \r\n  return (\r\n    <Paper\r\n      className={classes.Paper + \" \" + isShadow}\r\n      elevation={3}\r\n      style={{ padding: \"5px 5px 5px 0\" }}\r\n    >\r\n      <div>\r\n        <Checkbox\r\n          checked={status === TaskStatuses.Completed}\r\n          onChange={onStatusChange}\r\n          color=\"primary\"\r\n          inputProps={{ \"aria-label\": \"secondary checkbox\" }}\r\n          disabled={entityStatus === \"loading\"}\r\n        />\r\n        <EditableTitle\r\n          value={title}\r\n          changeTitle={onTitleChange}\r\n          type=\"listItem\"\r\n          disabled={entityStatus === \"loading\"}\r\n        />\r\n      </div>\r\n\r\n      <Button\r\n        variant=\"outlined\"\r\n        size=\"small\"\r\n        color=\"secondary\"\r\n        startIcon={<DeleteIcon />}\r\n        onClick={onDeleted}\r\n        disabled={entityStatus === \"loading\"}\r\n      >\r\n        task\r\n      </Button>\r\n    </Paper>\r\n  );\r\n})\r\nexport default ListItem","\r\nimport React, { useCallback, useEffect } from 'react'\r\nimport Buttons from '../common/buttons/buttons';\r\nimport ListItem from './listItem/listItem'\r\nimport AddItemForm from '../common/addItemForm/addItemForm';\r\nimport EditableTitle from '../common/editableTitle/editableTitle';\r\nimport { Button, Grid} from '@material-ui/core';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { useDispatch } from 'react-redux';\r\nimport { fetchTaskCreation, fetchTasksReceive} from '../../redux/task-reducer';\r\nimport { changeTodolistFilter,  fetchChangeListTitle, fetchRemoveTodoList, FilterType} from '../../redux/todos-reduser';\r\nimport { TaskStatuses, TaskType } from '../../api/api';\r\nimport { RequestStatusType } from '../../redux/app-reducer';\r\n\r\ntype todoListTypes = {\r\n  title: string;\r\n  todoListId: string;\r\n  tasks: Array<TaskType>;\r\n  active: FilterType;\r\n  entityStatus: RequestStatusType;\r\n};\r\n\r\nconst TodoLists: React.FC<todoListTypes> = React.memo(({ title, tasks, active, todoListId, entityStatus}) => {\r\n  \r\n  const dispatch = useDispatch();\r\n    useEffect(() => {\r\n      dispatch(fetchTasksReceive(todoListId));\r\n    }, []);\r\n  \r\n  const changeFilterHandler = useCallback((value: FilterType) => {\r\n    dispatch(changeTodolistFilter({id:todoListId, filter:value}));\r\n  },[dispatch, todoListId])\r\n\r\n  const onTodoRemove = useCallback(() => {\r\n  dispatch(fetchRemoveTodoList(todoListId));\r\n  }, [dispatch, todoListId])\r\n  \r\n  const onTaskAdded = useCallback((title: string) => {\r\n   dispatch(fetchTaskCreation(todoListId, title));\r\n  }, [dispatch, todoListId])\r\n  \r\n  const OnChangeTodoName = useCallback((title: string) => {\r\n    dispatch(fetchChangeListTitle(title, todoListId));\r\n  },[dispatch, todoListId])\r\n\r\n    const onFilterHandler = (arr: Array<TaskType>, filter: FilterType) => {\r\n      switch (filter) {\r\n        case \"all\": {\r\n          return arr;\r\n        }\r\n        case \"active\": {\r\n          return arr.filter((el) => el.status === TaskStatuses.New);\r\n        }\r\n        case \"completed\": {\r\n          return arr.filter((el) => el.status === TaskStatuses.Completed);\r\n        }\r\n        default:\r\n          return arr;\r\n      }\r\n    };\r\n  const itemList = onFilterHandler(tasks, active).map(({...props}) => {\r\n    return <ListItem\r\n      key={props.id}\r\n      {...props}\r\n    />;\r\n  })\r\n  return (\r\n    <Grid container>\r\n      <Grid item xs>\r\n        <EditableTitle value={title} changeTitle={OnChangeTodoName} type='header'/>\r\n        <Button\r\n          variant=\"outlined\"\r\n          color=\"secondary\"\r\n          size=\"medium\"\r\n          startIcon={<DeleteIcon />}\r\n          onClick={onTodoRemove}\r\n          style={{ marginLeft: \"30px\" }}\r\n          disabled={entityStatus === 'loading'}\r\n        >\r\n          list\r\n        </Button>\r\n      </Grid>\r\n\r\n      <AddItemForm\r\n        addTitle={onTaskAdded}\r\n        name={\"task\"}\r\n        placeholder='type your task name'\r\n        disabled={entityStatus === 'loading'}\r\n        \r\n      />\r\n      <Grid item style={{width: \"100%\"}}>{itemList}</Grid>\r\n      <Buttons changeFilterClick={changeFilterHandler} active={active} />\r\n    </Grid>\r\n  );\r\n})\r\nexport default TodoLists","import { Container, Grid, Paper } from '@material-ui/core'\r\nimport React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { AppRootStateType } from '../../redux/store'\r\nimport { fetchCreateTodoList, fetchTodolists, TodoListsCommonType } from '../../redux/todos-reduser'\r\nimport { TasksStateType } from '../app/App'\r\nimport AddItemForm from '../common/addItemForm/addItemForm'\r\nimport TodoLists from '../todoLists/todoLists'\r\n\r\nconst Content = () => {\r\n  const dispatch = useDispatch()\r\n  const todos = useSelector<AppRootStateType, Array<TodoListsCommonType>>((state) => state.todolists)\r\n  const tasks = useSelector<AppRootStateType, TasksStateType>((state) => state.tasks)\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchTodolists());\r\n  }, [])\r\n\r\n  const onTodoAdded = useCallback((title: string) => {\r\n    dispatch(fetchCreateTodoList(title));\r\n  }, [dispatch])\r\n    if (!isLoggedIn) {\r\n      return <Redirect to=\"/login\" />;\r\n    }\r\n  return (\r\n    <Container fixed>\r\n      <Grid container style={{ padding: \"30px\", justifyContent: \"center\" }}>\r\n        <AddItemForm\r\n          addTitle={onTodoAdded}\r\n          name={\"todo\"}\r\n          placeholder=\"Type todo name to start\"\r\n        />\r\n      </Grid>\r\n      <Grid\r\n        container\r\n        spacing={3}\r\n        style={{ marginTop: \"50px\" }}\r\n        direction=\"row\"\r\n        justify=\"space-between\"\r\n      >\r\n        {todos.map((el) => {\r\n          return (\r\n            <Grid key={el.id} item style={{ width: \"500px\" }}>\r\n              <Paper style={{ padding: \"10px\" }}>\r\n                <TodoLists\r\n                  key={el.id}\r\n                  todoListId={el.id}\r\n                  title={el.title}\r\n                  tasks={tasks[el.id]}\r\n                  active={el.filter}\r\n                  entityStatus={el.entityStatus}\r\n                />\r\n              </Paper>\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Grid>\r\n    </Container>\r\n  );\r\n}\r\nexport default Content","/* eslint-disable react/jsx-no-target-blank */\r\nimport React from \"react\";\r\nimport {\r\n  Checkbox,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  FormLabel,\r\n  TextField,\r\n  Button,\r\n  Grid,\r\n} from \"@material-ui/core\";\r\nimport { useFormik } from \"formik\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { AppRootStateType } from \"../../../redux/store\";\r\nimport { login } from \"../../../redux/auth-reducer\";\r\n\r\ntype FormikErrorType = {\r\n  email?: string;\r\n  password?: string;\r\n  rememberMe?: boolean;\r\n};\r\nexport type DataType = {\r\n  email: string;\r\n  password: string;\r\n  rememberMe: boolean;\r\n};\r\n\r\nconst Login = () => {\r\n   \r\n  const dispatch = useDispatch();\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn);\r\n   \r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: \"\",\r\n      password: \"\",\r\n      rememberMe: false,\r\n    },\r\n    validate: (values) => {\r\n      const errors: FormikErrorType = {};\r\n      if (!values.email) {\r\n        errors.email = \"Required\";\r\n      } else if (\r\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\r\n      ) {\r\n        errors.email = \"Invalid email address\";\r\n      }\r\n      if (values.password.length < 2) {\r\n        errors.password = \"Too Short password\";\r\n      }\r\n      return errors;\r\n    },\r\n\r\n    onSubmit: (values: DataType) => {\r\n      dispatch(login(values.email, values.password, values.rememberMe));\r\n      formik.resetForm();\r\n    },\r\n  });\r\n  if (isLoggedIn) {\r\n    return <Redirect to={\"/\"} />;\r\n  }\r\n  return (\r\n    <Grid container justify=\"center\">\r\n      <Grid item xs={4}>\r\n        <form onSubmit={formik.handleSubmit}>\r\n          <FormControl>\r\n            <FormLabel>\r\n              <p>\r\n                To log in get registered&ensp;\r\n                <a\r\n                  href={\"https://social-network.samuraijs.com/ \"}\r\n                  target={\"_blank\"}\r\n                >\r\n                  here\r\n                </a>\r\n              </p>\r\n              <p>or use common test account credentials:</p>\r\n              <p>Email: free@samuraijs.com</p>\r\n              <p>Password: free</p>\r\n            </FormLabel>\r\n            <FormGroup>\r\n              <TextField\r\n                label=\"Email\"\r\n                margin=\"normal\"\r\n                {...formik.getFieldProps(\"email\")}\r\n                onBlur={formik.handleBlur}\r\n              />\r\n              {formik.errors.email && formik.touched.email ? (\r\n                <div style={{ color: \"red\" }}>{formik.errors.email}</div>\r\n              ) : null}\r\n              <TextField\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                margin=\"normal\"\r\n                {...formik.getFieldProps(\"password\")}\r\n                onBlur={formik.handleBlur}\r\n              />\r\n              {formik.errors.password && formik.touched.password ? (\r\n                <div style={{ color: \"red\" }}>{formik.errors.password}</div>\r\n              ) : null}\r\n              <FormControlLabel\r\n                label={\"Remember me\"}\r\n                control={<Checkbox {...formik.getFieldProps(\"rememberMe\")} />}\r\n              />\r\n              <Button type={\"submit\"} variant={\"contained\"} color={\"primary\"}>\r\n                Login\r\n              </Button>\r\n            </FormGroup>\r\n          </FormControl>\r\n        </form>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\nexport default Login","export default __webpack_public_path__ + \"static/media/404-error.7e12d563.png\";","import { CardMedia, Container, Grid } from '@material-ui/core';\r\nimport React from 'react'\r\nimport Img from './404-error.png'\r\nconst Page404 = () => {\r\n  return (\r\n    <Container>\r\n      <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" style={{height:\"80vh\"}}>\r\n        <CardMedia\r\n          component=\"img\"\r\n          alt=\"404\"\r\n          image={Img}\r\n          title=\"404\"\r\n          style={{ height: \"500px\" }}\r\n        />\r\n      </Grid>\r\n    </Container>\r\n  );\r\n}\r\nexport default Page404","\n\nimport React, { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Header from '../header/header';\nimport classes from './App.module.scss';\nimport { AppRootStateType } from '../../redux/store';\nimport { TaskType } from '../../api/api';\nimport { CircularProgress, LinearProgress } from \"@material-ui/core\";\nimport { initializeApp, RequestStatusType } from '../../redux/app-reducer';\nimport { ErrorSnackbar } from '../common/errorSnackbar/errorSnackbar';\nimport Content from '../content/content';\nimport Login from '../common/login/login';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport Page404 from '../common/404/404';\n\n\nexport type TasksStateType = {\n  [key: string]: Array<TaskType>;\n};\n\n\nfunction App() {\n  const dispatch = useDispatch()\n  useEffect(() => {\n    dispatch(initializeApp());\n  },[])\n  const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\n  const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\nconsole.log(isInitialized);\n\n//   if (!isInitialized) {\n//    return <div\n//        style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n//        <CircularProgress/>\n//    </div>\n// }\n\n  return (\n    <div className={classes.App}>\n      <Header />\n      <ErrorSnackbar />\n      {status === \"loading\" && (\n        <LinearProgress\n          color=\"primary\"\n          variant=\"indeterminate\"\n          style={{\n            height: \"10px\",\n            backgroundColor: \"#abe9cd\",\n            backgroundImage: \"linear-gradient(315deg, #abe9cd 0%, #3eadcf 74%)\",\n          }}\n        />\n      )}\n      <Switch>\n        <Route exact path={\"/\"} render={() => <Content />} />\n        <Route exact path={\"/login\"} render={() => <Login />} />\n        <Route path={\"*\"} render={() => <Page404 />} />\n        <Redirect from={\"*\"} to={\"/404\"} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { appReducer } from './app-reducer';\r\nimport { authReducer } from './auth-reducer';\r\nimport { tasksReducer } from './task-reducer';\r\nimport { todolistsReducer } from './todos-reduser';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n   tasks: tasksReducer,\r\n   todolists: todolistsReducer,\r\n   app: appReducer,\r\n   auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: getDefaultMiddleware =>getDefaultMiddleware().prepend(thunk)  \r\n})\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3V4x_\",\"Paper\":\"App_Paper__2iAW7\",\"isDone\":\"App_isDone__e5G6X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formButton\":\"form_formButton__XdhYI\",\"AddFormWrap\":\"form_AddFormWrap__3Z7_S\",\"error\":\"form_error__1w2Gi\",\"Error\":\"form_Error__2lJnA\",\"large\":\"form_large__2FEnX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Span\":\"title_Span__12Jba\",\"header\":\"title_header__7MTwh\",\"listItem\":\"title_listItem__ndEex\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Active\":\"buttons_Active__22bQJ\"};"],"sourceRoot":""}